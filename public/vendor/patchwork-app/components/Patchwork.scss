@import "../Options.scss";
$column-width: ($max-width / $column-count);

.patchwork {
  display: flex;
  max-width: $max-width;
  flex-direction: row;
  flex-flow: row wrap;
}

*[data-patchwork] {
  flex: 1 1 100%;
}

patchwork-break {
    display: none;
}

@mixin column-styles($label) {

  *[data-patchwork*="#{$label}-size: none"] {
      display: none;
  }

  @if $label == large or $label == medium {

    *[data-patchwork*="#{$label}-size: break"], patchwork-break[for*="#{$label}"] {
        width: $max-width;
        visibility: hidden;
        display: block;
        height: 0 !important;
        padding: 0 !important;
        margin: 0 !important;
    }

    @for $index from 0 through $column-count {

        *[data-patchwork*="#{$label}-size: #{$index}"] {

            @if $index == 0 {
                flex: $index;
            } @else {
                flex: $index;
                max-width: #{$column-width * $index};
            }

        }

        *[data-patchwork*="#{$label}-size: #{$index}!"] {

            @if $index != 0 {
                flex: $index #{$column-width * $index};
                width: #{$column-width * $index};
            }

        }

    }

  }

  @for $index from map-get($order-limit, from) through map-get($order-limit, to) {

    *[data-patchwork*="#{$label}-order: #{$index}"] {
      order: $index
    }

  }

}

@mixin columns {

  $labels-list: tiny small medium large;
  $previous-label: none;

  @each $label in $labels-list {

    @if $label == large {

      @media all and (min-width: map-get($breakpoints, $previous-label)) {
        @include column-styles($label);
      }

    } @else {

      @media all and (min-width: map-get($breakpoints, $previous-label)) and (max-width: map-get($breakpoints, $label)) {
        @include column-styles($label);
      }

    }

    $previous-label: $label;

  }

}

@include columns;